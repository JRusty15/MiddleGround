package com.stander.mapstest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Activity;
import android.content.IntentSender;
import android.location.Location;
import android.os.Bundle;
import android.util.Log;
import android.widget.Toast;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.GooglePlayServicesClient;
import com.google.android.gms.location.LocationClient;
import com.google.android.gms.location.LocationListener;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;

public class MainActivity extends Activity implements
	GooglePlayServicesClient.ConnectionCallbacks,
	GooglePlayServicesClient.OnConnectionFailedListener,
	LocationListener
{

	private final static int
    CONNECTION_FAILURE_RESOLUTION_REQUEST = 9000;
	
	// Milliseconds per second
    private static final int MILLISECONDS_PER_SECOND = 1000;
    // Update frequency in seconds
    public static final int UPDATE_INTERVAL_IN_SECONDS = 10;
    // Update frequency in milliseconds
    private static final long UPDATE_INTERVAL =
            MILLISECONDS_PER_SECOND * UPDATE_INTERVAL_IN_SECONDS;
    // The fastest update frequency, in seconds
    private static final int FASTEST_INTERVAL_IN_SECONDS = 10;
    // A fast frequency ceiling in milliseconds
    private static final long FASTEST_INTERVAL =
            MILLISECONDS_PER_SECOND * FASTEST_INTERVAL_IN_SECONDS;

	
	LocationClient mLocationClient;
	Location mLocation;
	LocationRequest mLocationRequest;

	 @Override
	    protected void onCreate(Bundle savedInstanceState) {
	        super.onCreate(savedInstanceState);
	        setContentView(R.layout.activity_main);
	        
	        GoogleMap map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
	        map.setMyLocationEnabled(true);
	        
	        //LatLng test = new LatLng(39.9613, -74.433);
	        
	        map.setMyLocationEnabled(true);
	       // map.moveCamera(CameraUpdateFactory.newLatLngZoom(test,  13));
	        
	       // map.addMarker(new MarkerOptions().title("Test")
	       // 		.snippet("This is a test position")
	       // 		.position(test));
	        
	        mLocationClient = new LocationClient(this, this, this);

	        mLocationRequest = LocationRequest.create();
	        mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
	        mLocationRequest.setInterval(UPDATE_INTERVAL);
	        mLocationRequest.setFastestInterval(FASTEST_INTERVAL);
	    }

	@Override
	public void onConnectionFailed(ConnectionResult connectionResult) {
		/*
         * Google Play services can resolve some errors it detects.
         * If the error has a resolution, try sending an Intent to
         * start a Google Play services activity that can resolve
         * error.
         */
        if (connectionResult.hasResolution()) {
            try {
                // Start an Activity that tries to resolve the error
                connectionResult.startResolutionForResult(
                        this,
                        CONNECTION_FAILURE_RESOLUTION_REQUEST);
                /*
                 * Thrown if Google Play services canceled the original
                 * PendingIntent
                 */
            } catch (IntentSender.SendIntentException e) {
                // Log the error
                e.printStackTrace();
            }
        } else {
            /*
             * If no resolution is available, display a dialog to the
             * user with the error.
             */
        	Toast.makeText(this, "Error: connectionResult.getErrorCode()", Toast.LENGTH_SHORT).show();
        }
	}

	@Override
	public void onConnected(Bundle arg0) {
		Toast.makeText(this, "Connected!", Toast.LENGTH_SHORT).show();
		
		GoogleMap map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
        map.setMyLocationEnabled(true);
        mLocation = mLocationClient.getLastLocation();
        LatLng cur = new LatLng(mLocation.getLatitude(), mLocation.getLongitude());
        map.moveCamera(CameraUpdateFactory.newLatLngZoom(cur,  13));
        
        //Thread placesThread = null;
        //Places p = new Places(mLocation);
        //placesThread = new Thread(p);
        //placesThread.start();
        
        GetNearbyPlaces();
        
        //mLocationClient.requestLocationUpdates(mLocationRequest, this);
	}

	private void GetNearbyPlaces() {
		Log.i("near", "Getting nearby places from " + mLocation.getLatitude() + ", " + mLocation.getLongitude());
		
		String requestUrl = "";
		requestUrl = "https://maps.googleapis.com/maps/api/place/nearbysearch/json?";
		requestUrl += "key=" + "AIzaSyCMd39HjXAesq9Hk4Yo54Vnd5UPLohu5rU";
		requestUrl += "&location=" + mLocation.getLatitude() + "," + mLocation.getLongitude();
		requestUrl += "&radius=1000";
		requestUrl += "&sensor=true";
		requestUrl += "&types=food";
		
		Log.i("near", requestUrl);
		
		HttpResponse response = null;
		HttpClient httpClient = new DefaultHttpClient();
		httpClient.getParams().setParameter("http.socket.timeout", Integer.valueOf(0));
		httpClient.getParams().setParameter("http.connection.stalecheck", Boolean.valueOf(true));	

		HttpGet httpget = new HttpGet(requestUrl);

		try
		{
			Log.i("near", "about to execute...");
			
			response = httpClient.execute(httpget);
			
			if(response == null || response.getStatusLine().getStatusCode() != 200)
			{
				Log.i("near", "Error connecting to url");
				if(response != null)
				{
					Log.i("near", "Status: " + response.getStatusLine());
				}
			}
			else
			{
				Log.i("near", response.getStatusLine().toString());
				
				HttpEntity entity = response.getEntity();
				if(entity != null)
				{
					InputStream instream = entity.getContent();
					String result = convertStreamToString(instream);
					instream.close();
					
					Log.i("near", result);
				}
			}
		}
		catch (Exception ex) 
		{
			Log.i("HTTP", "Exception caught: " + ex.getMessage());
		}
	}
	
	 private static String convertStreamToString(InputStream is) {
		    /*
		     * To convert the InputStream to String we use the BufferedReader.readLine()
		     * method. We iterate until the BufferedReader return null which means
		     * there's no more data to read. Each line will appended to a StringBuilder
		     * and returned as String.
		     */
		    BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		    StringBuilder sb = new StringBuilder();

		    String line = null;
		    try {
		        while ((line = reader.readLine()) != null) {
		            sb.append(line + "\n");
		        }
		    } catch (IOException e) {
		        e.printStackTrace();
		    } finally {
		        try {
		            is.close();
		        } catch (IOException e) {
		            e.printStackTrace();
		        }
		    }
		    return sb.toString();
		}
	
   

	@Override
	public void onDisconnected() {
		Toast.makeText(this, "Disconnected", Toast.LENGTH_SHORT).show();
	}
	
	
	/*
     * Called when the Activity becomes visible.
     */
    @Override
    protected void onStart() {
        super.onStart();
        // Connect the client.
        mLocationClient.connect();
    }

    /*
     * Called when the Activity is no longer visible.
     */
    @Override
    protected void onStop() {
        // Disconnecting the client invalidates it.
        mLocationClient.disconnect();
        super.onStop();
    }

	@Override
	public void onLocationChanged(Location location) {
		String msg = "Updated Location: " +
                Double.toString(location.getLatitude()) + "," +
                Double.toString(location.getLongitude());
        Toast.makeText(this, msg, Toast.LENGTH_SHORT).show();
        
        GoogleMap map = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();
        map.setMyLocationEnabled(true);
        mLocation = location;
        LatLng cur = new LatLng(mLocation.getLatitude(), mLocation.getLongitude());
        map.moveCamera(CameraUpdateFactory.newLatLngZoom(cur,  13));
        
        map.clear();

        map.addMarker(new MarkerOptions().title("Current")
     	        		.snippet("This is where you are")
     	        		.position(cur));
	}


}
